{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/choseonghyeon/Documents/GitHub/website/frontend/src/Study.js\";\nimport React, { Component, useEffect } from 'react';\nimport Control from './components/Control';\nimport Content from './components/Content';\nimport Write from './components/Write';\n\nclass Study extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'beginner',\n\n      /* beginner intermediate advanced*/\n      mark_mode: 'beginner',\n      id: 1,\n      tmp: [],\n      content_beginner: [],\n      content_intermediate: [],\n      content_advanced: [],\n      content: {}\n    };\n    /*\n    fetch('/api/study/notes', {\n      method:'GET'\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          tmp: res\n        });\n      });\n      */\n\n    this.state.tmp = [{\n      \"id\": 1,\n      \"title\": \"C++ STL(1)-vector,list,deque\",\n      \"writer\": \"최재민\",\n      \"class\": 1\n    }, {\n      \"id\": 2,\n      \"title\": \"C++ STL(2)-set,map\",\n      \"writer\": \"최재민\",\n      \"class\": 1\n    }, {\n      \"id\": 3,\n      \"title\": \"C++ DynamicProgramming\",\n      \"writer\": \"최재민\",\n      \"class\": 2\n    }, {\n      \"id\": 4,\n      \"title\": \"C++ Dijkstra\",\n      \"writer\": \"최재민\",\n      \"class\": 2\n    }, {\n      \"id\": 5,\n      \"title\": \"C++ SegmentTree\",\n      \"writer\": \"최재민\",\n      \"class\": 3\n    }, {\n      \"id\": 6,\n      \"title\": \"C++ MaximumFlow\",\n      \"writer\": \"최재민\",\n      \"class\": 3\n    }];\n\n    for (let i = 0; i < this.state.tmp.length; i++) {\n      if (this.state.tmp[i].class === 1) {\n        this.state.content_beginner.push(this.state.tmp[i]);\n      } else if (this.state.tmp[i].class === 2) {\n        this.state.content_intermediate.push(this.state.tmp[i]);\n      } else if (this.state.tmp[i].class === 3) {\n        this.state.content_advanced.push(this.state.tmp[i]);\n      }\n    }\n\n    this.state.content = {\n      \"id\": \"1\",\n      \"title\": \"1. Brute Force & Divide and Conquer\",\n      \"author\": \"최재민\",\n      \"content\": \"# 1. 완전 탐색과 분할 정복\\nPS를 할 때 가장 먼저 고려해야할 풀이는 문제에 주어진 그대로 \\\"무식하게 푸는 것\\\"입니다. 간과하기 쉬운 것이, 이 무식한 풀이로 풀리는 문제가 꽤 많은데 불구하고 많은 사람들은 쉬운 문제에 너무 어렵게 접근하곤 합니다. 오늘 다룰 알고리즘은 완전 탐색(brute-force)과 분할 정복(divide-and-conquer)입니다.\\n\\n## 완전 탐색 👊\\nPS에서 \\\"무식하게 푼다\\\"라고 함은 가능한 경우의 수를 일일이 나열하면서 답은 찾는 방법을 의미합니다.\\n이 알고리즘을 <b>완전 탐색(brute-force)</b>이라고 부르죠.\",\n      \"create_time\": \"2021-02-08T15:00:00Z\",\n      \"modify_time\": \"2021-02-08T15:00:00Z\",\n      \"class\": 1\n    };\n  }\n\n  render() {\n    console.log(this.state.content_beginner);\n    console.log('mode :' + this.state.mode);\n    console.log('mark_mode :' + this.state.mark_mode);\n    let data = [];\n\n    if (this.state.mode === 'beginner') {\n      data = this.state.content_beginner;\n    } else if (this.state.mode === 'intermediate') {\n      data = this.state.content_intermediate;\n    } else if (this.state.mode === 'advanced') {\n      data = this.state.content_advanced;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        mode: this.state.mode,\n        mark_mode: this.state.mark_mode,\n        data: data,\n        onChangeMark_mode: function (_mark_mode) {\n          this.setState({\n            mark_mode: _mark_mode\n          });\n        }.bind(this),\n        onChangeMode: function (_mode) {\n          this.setState({\n            mode: _mode\n          });\n        }.bind(this),\n        onChangeNum: function (_num) {\n          this.setState({\n            num: _num\n          });\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        content: this.state.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Write, {\n        content_beginner: this.state.content_beginner,\n        content_intermediate: this.state.content_intermediate,\n        content_advanced: this.state.content_advanced,\n        new_id: this.state.tmp[this.state.tmp.length - 1].id + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Study;","map":{"version":3,"sources":["/Users/choseonghyeon/Documents/GitHub/website/frontend/src/Study.js"],"names":["React","Component","useEffect","Control","Content","Write","Study","constructor","props","state","mode","mark_mode","id","tmp","content_beginner","content_intermediate","content_advanced","content","i","length","class","push","render","console","log","data","_mark_mode","setState","bind","_mode","_num","num"],"mappings":"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","sourcesContent":["import React, {Component, useEffect} from 'react';\nimport Control from './components/Control';\nimport Content from './components/Content';\nimport Write from './components/Write';\n\nclass Study extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      mode:'beginner', /* beginner intermediate advanced*/\n      mark_mode:'beginner',\n      id: 1,\n      tmp: [],\n      content_beginner: [],\n      content_intermediate: [],\n      content_advanced: [],\n      content: {}\n    };\n    /*\n    fetch('/api/study/notes', {\n      method:'GET'\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          tmp: res\n        });\n      });\n      */\n    this.state.tmp = [\n      {\n        \"id\": 1,\n        \"title\": \"C++ STL(1)-vector,list,deque\",\n        \"writer\": \"최재민\",\n        \"class\": 1\n      },\n      {\n        \"id\": 2,\n        \"title\": \"C++ STL(2)-set,map\",\n        \"writer\": \"최재민\",\n        \"class\": 1\n      },\n      {\n        \"id\": 3,\n        \"title\": \"C++ DynamicProgramming\",\n        \"writer\": \"최재민\",\n        \"class\": 2\n      },\n      {\n        \"id\": 4,\n        \"title\": \"C++ Dijkstra\",\n        \"writer\": \"최재민\",\n        \"class\": 2\n      },\n      {\n        \"id\": 5,\n        \"title\": \"C++ SegmentTree\",\n        \"writer\": \"최재민\",\n        \"class\": 3\n      },\n      {\n        \"id\": 6,\n        \"title\": \"C++ MaximumFlow\",\n        \"writer\": \"최재민\",\n        \"class\": 3\n      }\n    ]\n    for(let i = 0; i < this.state.tmp.length; i++){\n      if(this.state.tmp[i].class === 1){\n        this.state.content_beginner.push(this.state.tmp[i]);\n      }else if(this.state.tmp[i].class === 2){\n        this.state.content_intermediate.push(this.state.tmp[i]);\n      }else if(this.state.tmp[i].class === 3){\n        this.state.content_advanced.push(this.state.tmp[i]);\n      }\n    }\n    \n    this.state.content = \n      {\n        \"id\": \"1\",\n        \"title\": \"1. Brute Force & Divide and Conquer\",\n        \"author\": \"최재민\",\n        \"content\": \"# 1. 완전 탐색과 분할 정복\\nPS를 할 때 가장 먼저 고려해야할 풀이는 문제에 주어진 그대로 \\\"무식하게 푸는 것\\\"입니다. 간과하기 쉬운 것이, 이 무식한 풀이로 풀리는 문제가 꽤 많은데 불구하고 많은 사람들은 쉬운 문제에 너무 어렵게 접근하곤 합니다. 오늘 다룰 알고리즘은 완전 탐색(brute-force)과 분할 정복(divide-and-conquer)입니다.\\n\\n## 완전 탐색 👊\\nPS에서 \\\"무식하게 푼다\\\"라고 함은 가능한 경우의 수를 일일이 나열하면서 답은 찾는 방법을 의미합니다.\\n이 알고리즘을 <b>완전 탐색(brute-force)</b>이라고 부르죠.\",\n        \"create_time\": \"2021-02-08T15:00:00Z\",\n        \"modify_time\": \"2021-02-08T15:00:00Z\",\n        \"class\": 1\n      }\n\n\n    }\n  render(){\n    console.log(this.state.content_beginner);\n    console.log('mode :' + this.state.mode);\n    console.log('mark_mode :' + this.state.mark_mode);\n    let data=[];\n    if(this.state.mode === 'beginner'){\n      data = this.state.content_beginner;\n    }else if(this.state.mode === 'intermediate'){\n      data = this.state.content_intermediate;\n    }else if(this.state.mode === 'advanced'){\n      data = this.state.content_advanced;\n    }\n    return (\n      <div>\n        <Control\n          mode = {this.state.mode}\n          mark_mode = {this.state.mark_mode}\n          data = {data}\n          onChangeMark_mode={function(_mark_mode){\n            this.setState({mark_mode:_mark_mode});\n          }.bind(this)}\n          onChangeMode={function(_mode){\n            this.setState({mode:_mode});\n          }.bind(this)}\n          onChangeNum={function(_num){\n            this.setState({num:_num});\n          }.bind(this)}\n        >\n        </Control>\n        <Content\n          content = {this.state.content}\n        ></Content>\n        <Write\n          content_beginner = {this.state.content_beginner}\n          content_intermediate = {this.state.content_intermediate}\n          content_advanced = {this.state.content_advanced}\n          new_id = {this.state.tmp[this.state.tmp.length - 1].id + 1}\n        ></Write>\n      </div>\n    );\n  }\n}\nexport default Study;\n"]},"metadata":{},"sourceType":"module"}